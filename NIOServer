package Server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;


public class Server {
    private Selector selector;
    private ServerSocketChannel socketChannel;
    private static final int PORT=8081;
    private static final int SIZE=1024;
    private final Charset charset = Charset.forName("UTF-8");

    public Server() throws IOException {
        selector=Selector.open();
        System.out.println("服务器开始运行");
        socketChannel=ServerSocketChannel.open();
        socketChannel.configureBlocking(false);
        socketChannel.bind(new InetSocketAddress(PORT));
        socketChannel.register(selector,SelectionKey.OP_ACCEPT);


        while(true){
            selector.select();
            //System.out.println(selector.selectedKeys().size());
            for(SelectionKey sk:selector.selectedKeys()){
                selector.selectedKeys().remove(sk);
                SocketChannel sc;
                if(sk.isAcceptable()){
                    sc=socketChannel.accept();
                    sc.configureBlocking(false);
                    sc.register(selector,SelectionKey.OP_READ);
                    System.out.println(sc.getRemoteAddress()+" 连接");
                }
                if(sk.isReadable()){
                    sc= (SocketChannel) sk.channel();
                    StringBuilder msg=new StringBuilder();
                    ByteBuffer buffer=ByteBuffer.allocate(SIZE);
                    while(sc.read(buffer)>0){
                        buffer.flip();
                        msg.append(charset.decode(buffer));
                    }
                    System.out.println(sc.getRemoteAddress()+"发送了: "+msg);
                    sendmsg(msg.toString());
                }
            }
        }
    }

    public void sendmsg(String msg) throws IOException {
        Channel channel;
        for(SelectionKey k:selector.keys()){
            channel=k.channel();
            if(channel instanceof SocketChannel) {
                SocketChannel ch= (SocketChannel) channel;
                ch.write(charset.encode(msg));
            }
        }

    }

    public static void main(String[] agrs) throws IOException {
        new Server();
    }

}
